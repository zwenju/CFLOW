program main
implicit none
!
!  Example:
!
!    Input:
!
!      NX = 4, NY = 3
!
!    Output:
!
!      ELEMENT_NODE =
!         1,  3, 15,  2,  9,  8;
!        17, 15,  3, 16,  9, 10;
!         3,  5, 17,  4, 11, 10;
!        19, 17,  5, 18, 11, 12;
!         5,  7, 19,  6, 13, 12;
!        21, 19,  7, 20, 13, 14;
!        15, 17, 29, 16, 23, 22;
!        31, 29, 17, 30, 23, 24;
!        17, 19, 31, 18, 25, 24;
!        33, 31, 19, 32, 25, 26;
!        19, 21, 33, 20, 27, 26;
!        35, 33, 21, 34, 27, 28.
!
!  Diagram:
!
!   29-30-31-32-33-34-35
!    |\ 8  |\10  |\12  |
!    | \   | \   | \   |
!   22 23 24 25 26 27 28
!    |   \ |   \ |   \ |
!    |  7 \|  9 \| 11 \|
!   15-16-17-18-19-20-21
!    |\ 2  |\ 4  |\ 6  |
!    | \   | \   | \   |
!    8  9 10 11 12 13 14
!    |   \ |   \ |   \ |
!    |  1 \|  3 \|  5 \|
!    1--2--3--4--5--6--7
!======================================================
integer(kind=4) :: nx, ny
integer(kind=4) :: element_num, node_num 
integer(kind=4),allocatable :: elementlist(:,:), boundary_mark(:)
real(kind=4),allocatable :: nodelist(:,:)

integer(kind=4) :: node_file_unit, element_file_unit


!do k = 1, mesh_num


nx = 3 
ny = 4

element_num = nx * ny * 2
node_num = ( nx + nx + 1) * (ny + ny + 1)

allocate(nodelist(2,node_num))
allocate(elementlist(6,element_num))
allocate(boundary_mark(node_num)) 
call   xy_set_t6(nx,ny, node_num, nodelist, boundary_mark)
call   element_set_t6( nx, ny , element_num, elementlist)

open(unit=node_file_unit, file = "square.node")
open(unit=element_file_unit, file = "square.ele")
call writemeshtofile( node_file_unit, element_file_unit, nodelist, elementlist, boundary_mark, element_num, node_num)



deallocate(nodelist, elementlist, boundary_mark) 

end program 



subroutine writemeshtofile( node_file_unit, element_file_unit, nodelist, elementlist, boundary_mark, element_num, node_num)
implicit none
integer(kind=4) ::  node_file_unit, element_file_unit
integer(kind=4) ::  element_num, node_num 
integer(kind=4) ::  elementlist(6, element_num)
real(kind=8)    :: nodelist(2, node_num)
integer(kind=4) :: boundary_mark(node_num)


do inode  = 1, node_num 
write(file_unit, *) inode, nodelist(:, inode), boundary_mark(inode) 
enddo 


do inode = 1, element_num 
write(*,*) ielement, elementlist(:, ielement)
enddo 


return 
end subroutine  




subroutine   xy_set_t6(nx,ny, node_num, nodelist, boundary_mark)
implicit none
integer(kind=4) :: nx,ny,node_num
real(kind=8) ::  xl, xr, yb, yt
real(kind=8):: nodelist(2, node_num)
integer(kind=4) :: boundary_mark(node_num)

!> the region is [0,1] x [0,1]
!> nx is the number of the triangle edge on the x-axis
!> ny is the number of the triangle edge on the y-axis
!> node_num = ( nx + nx + 1 ) x (ny + ny + 1)



dx =  1.0d0 / nx /2.0d0
dy =  1.0d0 / ny /2.0d0

do  j = 0, 2 * ny

ty = real(j,8) * dy 
do  i = 1, 2 * nx 

nodelist(1, i + (j-1)* (2*nx + 1) ) = real(i,8) * dx
nodelist(1, i + (j-1)* (2*nx + 1) ) = ty 

enddo
enddo

!> set the boundary condition 


do  j = 0, 2 * ny
ty = real(j,8) * dy 
do  i = 0, 2 * nx 

if(j == 0 .or. j == 2 * ny) then 
boundary_mark( i + (j - 1) * (2*nx + 1) ) = 2
elseif( i == 1 .and. j/=0.and. j /= 2*ny ) then
boundary_mark( i + (j - 1) * (2*nx + 1) ) = 1
elseif( i == 2 * nx .and. j/=0 .and. j/= 2*ny) then
boundary_mark( i + (j - 1) * (2*nx + 1) ) = 3
else
boundary_mark( i + (j - 1) * (2*nx + 1) ) = 0
endif 


return
end subroutine 



 

subroutine  element_set_t6( nx, ny , element_num, elementlist)
implicit none
integer(kind=4) :: nx, ny, element_num
integer(kind=4) :: i, j, count
integer(kind=4) :: sw, s, se, w, c, e, nw, n, ne  
integer(kind=4) :: element_list(6, element_num)

!  Example:
!
!    Input:
!
!      NX = 4, NY = 3
!
!    Output:
!
!      ELEMENT_NODE =
!         1,  3, 15,  2,  9,  8;
!        17, 15,  3, 16,  9, 10;
!         3,  5, 17,  4, 11, 10;
!        19, 17,  5, 18, 11, 12;
!         5,  7, 19,  6, 13, 12;
!        21, 19,  7, 20, 13, 14;
!        15, 17, 29, 16, 23, 22;
!        31, 29, 17, 30, 23, 24;
!        17, 19, 31, 18, 25, 24;
!        33, 31, 19, 32, 25, 26;
!        19, 21, 33, 20, 27, 26;
!        35, 33, 21, 34, 27, 28.
!
!  Diagram:
!
!   29-30-31-32-33-34-35
!    |\ 8  |\10  |\12  |
!    | \   | \   | \   |
!   22 23 24 25 26 27 28
!    |   \ |   \ |   \ |
!    |  7 \|  9 \| 11 \|
!   15-16-17-18-19-20-21
!    |\ 2  |\ 4  |\ 6  |
!    | \   | \   | \   |
!    8  9 10 11 12 13 14
!    |   \ |   \ |   \ |
!    |  1 \|  3 \|  5 \|
!    1--2--3--4--5--6--7
!=============================================================

count = 0

do j = 1, ny
do i = 1, nx


      sw = ( j - 1 ) * ( 2 * nx + 1 ) + 2 * i - 1
      s  = sw + 1
      se = sw + 2

      w  = sw + 2 * nx + 1
      c  = w  + 1
      e  = w  + 2

      nw = w  + 2 * nx + 1
      n  = nw + 1
      ne = nw + 2

count = count + 1

element_list(1,count) = sw 
element_list(2,count) = ne 
element_list(3,count) = nw 

element_list(4,count) = n 
element_list(5,count) = w 
element_list(6,count) = c 



count = count + 1

element_list(1,count) = sw 
element_list(2,count) = se 
element_list(3,count) = ne 

element_list(4,count) = e 
element_list(5,count) = c 
element_list(6,count) = s 


enddo 

end subroutine 
























