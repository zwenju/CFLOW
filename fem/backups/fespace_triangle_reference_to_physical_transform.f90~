subroutine Ref2PhyLagrangeBasisTransformation( fespace, quadrature, t3 )
!!$ ******************************************************************************0
!!$the index the triangle 
!!$         (3)
!!$          |\
!!$          | \
!!$          |  \
!!$      (1) |___\(2)
!!$
!!$ the parameter t3(2,3) 
!!$ [x1, x2, x3]
!!$ [y1, y2, y3]
!!$ ******************************************************************************0 
use FEM_SPACE_TYPE_H 
use Quadrature_Rule_Type_H 
implicit none
type (fem_space_type), intent (inout) :: fespace 
real (kind=8), intent (in) :: t3(2,3)

real(kind=8) :: B(2,2), INV_B(2,2)
real(kind=8) :: area 

!!====================Part I===========================================================0
!!\hat{K} represent the element on the reference element, otherwise the physical element
!! the affine transformation F : \hat{K} + K 
!! [x] :=  [x2 - x1,  x3 - x1][\hat{x}]  + [x1]
!! [y] :=  [y2 - y1,  y3 - y1][\hat{y}]  + [y1]
!!----------------the determine of B --------------------------------------------------0
!!     det(B) = (x2 - x1)(y3-y1) - (x3-x1)(y2-y1)
!!-----------------------B ------------------------------------------------------------0
!B =
![ x2 - x1, x3 - x1]
![ y2 - y1, y3 - y1]
!!----------------------B^{-1}---------------------------------------------------------0
!iB =
![ y3 - y1, x1 - x3]
![ y1 - y2, x2 - x1]/det(B)
!!-------------------the derivative transformation ------------------------------------0 
! dx\hat{basis_} = \dxbasis_(x2-x1) + \dybasis_(y2-y1)
! dy\hat{basis_} = \dxbasis_(x3-x1) + \dybasis_(y3-y1)

!!the derivative of different basis function on the same point --------------------------------------------0
! [dx\hat{basis_1}(x1,y1), dy\hat{basis_1}(x1,y1) ]     [dxbasis_1(x1,y1), dybasis_1(x1,y1)]
! [dx\hat{basis_2}(x1,y1), dy\hat{basis_2}(x1,y1) ]     [dxbasis_2(x1,y1), dybasis_2(x1,y1)]  *  [ x2 - x1, x3 - x1]
! [dx\hat{basis_3}(x1,y1), dy\hat{basis_3}(x1,y1) ]  =  [dxbasis_3(x1,y1), dybasis_3(x1,y1)]     [ y2 - y1, y3 - y1]
! [dx\hat{basis_4}(x1,y1), dy\hat{basis_4}(x1,y1) ]     [dxbasis_4(x1,y1), dybasis_4(x1,y1)]
! [dx\hat{basis_5}(x1,y1), dy\hat{basis_5}(x1,y1) ]     [dxbasis_5(x1,y1), dybasis_5(x1,y1)]
! [dx\hat{basis_6}(x1,y1), dy\hat{basis_6}(x1,y1) ]     [dxbasis_6(x1,y1), dybasis_6(x1,y1)]
!==========================================================================================================0

!======Part II =========================================================================0
!to generate the matrix B---------------------------------------------------------------0
B(:,1) = t3(:,2)-t3(:,1)
B(:,2) = t3(:,3)-t3(:,1)
!!generate the determinant of matrix B -------------------------------------------------0
area = B(1,1)*B(2,2) - B(1,2) * B(2,1)
!to generate the inverse of matrix B----------------------------------------------------0
INV_B = reshape((/B(2,2), -B(2,1), -B(1,2),B(1,1)/),(/2,2/))
INV_B = INV_B / area

area = 0.5d0 * area 

!==========================Part III ====================================================0
!generate the gaussian quadrature points on the physical points-------------------------0
!! the affine transformation F : \hat{K} + K 
!! [x] :=  [x2 - x1,  x3 - x1][\hat{x}]  + [x1]
!! [y] :=  [y2 - y1,  y3 - y1][\hat{y}]  + [y1]


quadrature%phy_quad_points_2d = matmul(B, quadrature%ref_quad_points_2d)
quadrature%phy_quad_points_2d(1,:) = quadrature%ref_quad_points_2d(1, :) + t3(1,1)
quadrature%phy_quad_points_2d(2,:) = quadrature%ref_quad_points_2d(2, :) + t3(2,1)
quadrature%phy_quad_weights_2d  = abs(area) * quadrature%ref_quad_weights_2d  

fespace%phy_basis_value = fespace%ref_basis_value 

!============================Part IV ==================================================0
!generate derivative value of the basis function on the physical points ---------------0

call triangle_reference_to_physical_basis_gradient_transform  & 
          ( fespace%ref_basis_grad, INV_B, fespace%basis_array_num, quadrature%quad_num_2d, fespace%phy_basis_grad )

return 
end subroutine



subroutine triangle_reference_to_physical_basis_gradient_transform( ref_basis_grad, INV_B,  basis_num, quad_num,  phys_grad )
implicit none
!!the derivative of different basis function on the same point --------------------------------------------0
! [dx\hat{basis__1}(x1,y1), dy\hat{basis__1}(x1,y1) ]     [dxbasis__1(x1,y1), dybasis__1(x1,y1)]
! [dx\hat{basis__2}(x1,y1), dy\hat{basis__2}(x1,y1) ]     [dxbasis__2(x1,y1), dybasis__2(x1,y1)]  *  [ x2 - x1, x3 - x1]
! [dx\hat{basis__3}(x1,y1), dy\hat{basis__3}(x1,y1) ]  =  [dxbasis__3(x1,y1), dybasis__3(x1,y1)]     [ y2 - y1, y3 - y1]
! [dx\hat{basis__4}(x1,y1), dy\hat{basis__4}(x1,y1) ]     [dxbasis__4(x1,y1), dybasis__4(x1,y1)]
! [dx\hat{basis__5}(x1,y1), dy\hat{basis__5}(x1,y1) ]     [dxbasis__5(x1,y1), dybasis__5(x1,y1)]
! [dx\hat{basis__6}(x1,y1), dy\hat{basis__6}(x1,y1) ]     [dxbasis__6(x1,y1), dybasis__6(x1,y1)]
real(kind=8),intent(in)   :: ref_basis_grad (basis_num * quad_num, 2)
integer(kind=4),intent(in):: INV_B(2,2),  basis_num, quad_num  
real(kind=8),intent(out)   :: phy_basis_grad (basis_num * quad_num, 2)
!=========================================================================================================0
!refs_grad is the derivative information on the reference element, which first is store as follows =======0
![\dxphi_1(x1,y1),\dxphi_1(x2,y2),..,\dxphi_1(xn,yn), \dyphi_1(x1,y1),\dyphi_1(x2,y2),..,\dyphi_1(xn,yn)] 
![\dxphi_2(x1,y1),\dxphi_2(x2,y2),..,\dxphi_2(xn,yn), \dyphi_2(x1,y1),\dyphi_2(x2,y2),..,\dyphi_2(xn,yn)] 
![\dxphi_3(x1,y1),\dxphi_3(x2,y2),..,\dxphi_3(xn,yn), \dyphi_3(x1,y1),\dyphi_3(x2,y2),..,\dyphi_3(xn,yn)]
!---------------------------------------------------------------------------------------------------------0
!then i reshape the matrix refs_grad as refs_grad(BASIS_NUM*QuadNum,2)
![\dxphi_1(x1,y1),\dyphi_1(x1,y1)]
![\dxphi_2(x1,y1),\dyphi_2(x1,y1)]
![\dxphi_3(x1,y1),\dyphi_3(x1,y1)]
![\dxphi_1(x2,y2),\dyphi_1(x2,y2)]
![\dxphi_2(x2,y2),\dyphi_2(x2,y2)]
![\dxphi_3(x2,y2),\dyphi_3(x2,y2)]
![\dxphi_1(x3,y3),\dyphi_1(x3,y3)]
![\dxphi_2(x3,y3),\dyphi_2(x3,y3)]
![\dxphi_3(x3,y3),\dyphi_3(x3,y3)]
!     *               *
![\dxphi_1(xn,yn),\dyphi_1(xn,yn)]
![\dxphi_2(xn,yn),\dyphi_2(xn,yn)]
![\dxphi_3(xn,yn),\dyphi_3(xn,yn)]
!---------------------------------------------------------------------------------------------------------0
phy_basis_grad = matmul(ref_basis_grad, INV_B)

return 
end subroutine 
